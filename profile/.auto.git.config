#!/bin/sh

# Loading git prompt config
source ~/.git_prompt

# Loading colors variables
source ~/.colors

#Adding GitVersion to the path
export PATH="$PATH:/c/Program Files/GitVersion";

#Adding NuGet to the path
export PATH="$PATH:/c/Program Files/NuGet";

alias reload="source ~/.bashrc"
alias winenv="rundll32 sysdm.cpl,EditEnvironmentVariables"
alias vs="start *.sln"

alias gs="git status"
alias gk="gitk --all &"
alias gf="git fetch --prune"
alias gd="git diff --word-diff"

alias clean_nexus="$GIT_REPOS_DIR/Auto.Git/scripts/clean_nexus.sh"
alias fetch="$GIT_REPOS_DIR/Auto.Git/scripts/fetch_all.sh"

export NEXUS_URL=""

function npush() {
	package=$1
	nuget push $1 -Source $NEXUS_URL
}
alias npush=npush

function gitBranchInfos() {
	f=$1
	status=$(git --git-dir=$f.git --work-tree=$f status)
	branch=$(echo $status | grep "On branch " | cut -d ' ' --fields 3)
	if [ "$branch" == "" ]; then
		branch=$(echo $status | grep "You are currently rebasing branch" | cut -d "'" --fields 2)
	fi
	if [ "$branch" == "" ]; then
		branch=$(echo $status | grep "detached at" | cut -d " " --fields 4)
	fi
	echo $status | grep "Your branch is up-to-date" >/dev/null
	if [ $? -eq 0 ]; then
		uptodate="${GREEN}up-to-date${RESTORE}";
	else 
		echo $status | grep "Your branch is behind" >/dev/null
		if [ $? -eq 0 ]; then
			uptodate="${RED}behind${RESTORE}";
		else
			echo $status | grep "rebase" >/dev/null
			if [ $? -eq 0 ]; then
				next=$(cat $f/.git/rebase-apply/next)
				last=$(cat $f/.git/rebase-apply/last)
				uptodate="${YELLOW}rebasing $next/$last${RESTORE}"
			else
				echo $status | grep "detached" > /dev/null
				if [ $? -eq 0 ]; then
					uptodate="${MAGENTA}-detached-${RESTORE}";
				else
					uptodate="${RED}not pushed${RESTORE}";
				fi
			fi
		fi
	fi
	echo $status | grep "nothing to commit" >/dev/null
	if [ $? -eq 0 ]; then
		workdirstatus="${GREEN}clean${RESTORE}"
	else
		workdirstatus="${RED}dirty${RESTORE}"
	fi
	if [ "$branch" == "master" ]; then branch="${RED}$branch${RESTORE}";
	elif [ "$branch" == "develop" ]; then branch="${YELLOW}$branch${RESTORE}"; 
	elif [ "${branch:0:8}" == "feature/" -o "${branch:0:5}" == "tech/" ]; then branch="${GREEN}$branch${RESTORE}";
	elif [ "${branch}" == "integration" ]; then branch="${WHITE}$branch${RESTORE}";
	else branch="${MAGENTA}$branch${RESTORE}"; fi
	printf "%-50s %-25s %-25s" "$branch" "$uptodate" "$workdirstatus"
}

function lsgit() {
	for f in "$GIT_REPOS_DIR"/*/; do 
		
		if [ ! -e "$f/.git" ]; then continue; fi
		
		gitInfos=$(gitBranchInfos $f)
		f=$(basename "$f")
		f="${LBLUE}$f${RESTORE}"
		printf "%-50s %s\n" "$f" "$gitInfos"
	done
}

alias lsg=lsgit

function lspacks() {
	wd=$(pwd)
	for f in "$GIT_REPOS_DIR"/*/; do 
	
		if [ ! -e "$f/.git" ]; then continue; fi
		
		cd "$f"
		
		nuget_version=$(GitVersion | grep "NuGetVersionV2" | cut -d '"' --fields 4)
		
		f=$(basename "$f")
		f="${LBLUE}$f${RESTORE}"
		printf "%-50s -> %-50s\n" "$f" "$nuget_version"
	done
	cd "$wd"
}

alias lsp=lspacks

function lsfull() {
	wd=$(pwd)
	for f in "$GIT_REPOS_DIR"/*/; do 
	
		if [ ! -e "$f/.git" ]; then continue; fi
		
		gitInfos=$(gitBranchInfos $f)
		cd "$f"
		nuget_version=$(GitVersion | grep "NuGetVersionV2" | cut -d '"' --fields 4)
		f=$(basename "$f")
		f="${LBLUE}$f${RESTORE}"
		printf "%-50s %s Version: %-50s\n" "$f" "$gitInfos" "$nuget_version"
	done
	cd "$wd"
}

alias lsf=lsfull

function sos() {
	echo "DON'T PANIC!"
	echo 
	echo "Here is a list of available useful commands:"
	echo
	echo "Shell commands:"
	echo "sos				Displays this message"
	echo "reload			Reloads the bash config"
	echo "winenv			Opens the Set Environment Variables windows tool"
	echo "vs				Opens visual studio on all solutions present in the current dir (start *.sln)"
	echo "npush				Pushes a nuget package to the Nexus"
	echo "lsg				Shows all the branches with status (pushed or not/clean or dirty...) of the repos in $GIT_REPOS_DIR"
	echo "lsp				Shows the versions checked out in the repos in $GIT_REPOS_DIR"
	echo "lsf				lsg + lsp at the same time. Version + branch status"
	echo "clean_nexus		Searches for packages in the nexus through the REST API. Use --delete to confirm deletion of found packages"
	echo
	echo "Git commands:"
	echo "gs				git status"
	echo "gk				gitk --all &"
	echo "gf				git fetch --prune"
	echo "gd				git diff --word-diff"
	echo "fetch				Fetches all repos in $GIT_REPOS_DIR"
}
alias sos=sos